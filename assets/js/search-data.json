{
  
    
        "post0": {
            "title": "The Idea of a Transform",
            "content": ". This blog is also a Jupyter notebook available to run from the top down. There will be code snippets that you can then run in any environment. In this section I will be posting what version of fastai2 and fastcore I am currently running at the time of writing this: . fastai2: 0.0.13 . | fastcore: 0.1.15 . | . . The DataBlock API Continued . This is part two of my series exploring the DataBlock API. If you have not read part one, fastai and the New DataBlock API, see here In it, we discussed the ideas of the DataBlock as a whole and how each of the lego-bricks can fit together to help solve some interesting problems. In this next blog, we&#39;ll be slowly diving into more complex ideas and uses with it, such as adjusting our y values inside of our get_y, dealing with classification data seperated by folders (and the splitters we can us) and Multi-Classification (with some creative uses). . From here on we&#39;ll be focusing solely on generating the DataLoaders. Seperate blogs will be made about training the various models. Now, onto the code! As we&#39;re still Vision based, we&#39;ll use the vision sub-library: . from fastai2.vision.all import * . ImageWoof . ImageWoof is a subset of 10 dogs from ImageNet. The idea is that these 10 species of dogs are extremely similar, and so they&#39;re hard to classify from scratch. We won&#39;t care about that part today, let&#39;s go through and see how the data is formatted and apply the DataBlock. First let&#39;s grab the data: . path = untar_data(URLs.IMAGEWOOF) . Now if we take a look at the path first, we&#39;ll notice that we have train and val folders. The two ideas I&#39;ll be introducing with this dataset for splitting and labelling are GrandparentSplitter and parent_label . path.ls() . (#2) [Path(&#39;/root/.fastai/data/imagewoof2/train&#39;),Path(&#39;/root/.fastai/data/imagewoof2/val&#39;)] . What do each of these do? I&#39;ll go into heavy detail on fastai&#39;s splitters and labellers but GrandparentSplitter operates with the assumption our data is split like ImageNet, where we have training data in a training folder and validation data into a validation folder such as here. Let&#39;s make a splitter now by passing in the name of the training folder and the validation folder: . splitter = GrandparentSplitter(train_name=&#39;train&#39;, valid_name=&#39;val&#39;) . Let&#39;s look at some splits. First we&#39;ll grab our list of images then use our GrandparentSplitter to seperate out two indicies for us, which we&#39;ll then look at to make sure it&#39;s working properly . items = get_image_files(path) . splits = splitter(items) . splits[0][0], splits[1][0] . (0, 9025) . Now let&#39;s look at images 0 and 9025: . items[0], items[9025] . (Path(&#39;/root/.fastai/data/imagewoof2/train/n02087394/n02087394_15618.JPEG&#39;), Path(&#39;/root/.fastai/data/imagewoof2/val/n02087394/n02087394_13440.JPEG&#39;)) . And we can see that the folders line up! . Now that we have the splitter out of the way, we need a way to get our classes! But what do they look like? We&#39;ll look inside the train folder at some of the images for some examples: . train_p = path/&#39;train&#39; . train_p.ls()[:3] . (#3) [Path(&#39;/root/.fastai/data/imagewoof2/train/n02087394&#39;),Path(&#39;/root/.fastai/data/imagewoof2/train/n02115641&#39;),Path(&#39;/root/.fastai/data/imagewoof2/train/n02111889&#39;)] . items = get_image_files(train_p)[:5]; items . (#5) [Path(&#39;/root/.fastai/data/imagewoof2/train/n02087394/n02087394_15618.JPEG&#39;),Path(&#39;/root/.fastai/data/imagewoof2/train/n02087394/n02087394_6198.JPEG&#39;),Path(&#39;/root/.fastai/data/imagewoof2/train/n02087394/n02087394_2253.JPEG&#39;),Path(&#39;/root/.fastai/data/imagewoof2/train/n02087394/n02087394_7428.JPEG&#39;),Path(&#39;/root/.fastai/data/imagewoof2/train/n02087394/n02087394_28267.JPEG&#39;)] . We can visualize this folder setup like so: . . What this tells us is that our labels are in the folder one level above the actual image, or in the parent folder (if we consider it like a tree). As such, we can use the parent_label function to extract it! Let&#39;s look: . labeller = parent_label . labeller(items[0]) . &#39;n02087394&#39; . From here we can simply build our DataBlock similar to the last post: . blocks = (ImageBlock, CategoryBlock) item_tfms=[Resize(224)] batch_tfms=[Normalize.from_stats(*imagenet_stats)] . block = DataBlock(blocks=blocks, get_items=get_image_files, get_y=parent_label, item_tfms=item_tfms, batch_tfms=batch_tfms) . And make our DataLoaders: . dls = block.dataloaders(path, bs=64) . To make sure it all worked out, let&#39;s look at a batch: . dls.show_batch(max_n=3) . The idea of a transform . Now we&#39;re still going to use the ImageWoof dataset here, but I want to introduce you to the concept of a transform. From an outside perspective and what we&#39;ve seen so far, this is normally limited to what we would call &quot;augmentation.&quot; With the new fastai this is no longer the case. Instead, let&#39;s think of a transform as &quot;any modification we can apply to our data at any point in time.&quot; . But what does that really mean? What is a transform? A function! Any transform can be written out as a simple function that we pass in at any moment. . What do I mean by this though? Let&#39;s take a look at those labels again. If we notice, we see bits like: . labeller(items[0]), labeller(items[1200]) . (&#39;n02087394&#39;, &#39;n02115641&#39;) . But that has no actual meaning to us (or anyone else reading to what we are doing). Let&#39;s use a transform that will change this into something readable. . First we&#39;ll build a dictionary that keeps track of what each original class name means: . lbl_dict = dict(n02086240= &#39;Shih-Tzu&#39;, n02087394= &#39;Rhodesian ridgeback&#39;, n02088364= &#39;Beagle&#39;, n02089973= &#39;English foxhound&#39;, n02093754= &#39;Australian terrier&#39;, n02096294= &#39;Border terrier&#39;, n02099601= &#39;Golden retriever&#39;, n02105641= &#39;Old English sheepdog&#39;, n02111889= &#39;Samoyed&#39;, n02115641= &#39;Dingo&#39; ) . Now to use this as a function, we need a way to look into the dictionary with any raw input and return back our string. This can be done via the __getitem__ function: . lbl_dict.__getitem__(labeller(items[0])) . &#39;Rhodesian ridgeback&#39; . Looks readable enough now, right? So where do I put this into the API. We can stack these mini-transforms anywhere we&#39;d like them applied. For instance here, we want it done on our get_y, but after parent_label has been applied. Let&#39;s do that: . block = DataBlock(blocks=blocks, get_items=get_image_files, get_y=[parent_label, lbl_dict.__getitem__], item_tfms=item_tfms, batch_tfms=batch_tfms) . dls = block.dataloaders(path, bs=64) . dls.show_batch(max_n=3) . Awesome! It worked, and that was super simple. Does the order matter here though? Let&#39;s try reversing it: . block = DataBlock(blocks=blocks, get_items=get_image_files, get_y=[lbl_dict.__getitem__, parent_label], item_tfms=item_tfms, batch_tfms=batch_tfms) . #collapse_output dls = block.dataloaders(path, bs=64) . KeyError Traceback (most recent call last) &lt;ipython-input-73-7087d4ed8be8&gt; in &lt;module&gt;() 4 item_tfms=item_tfms, 5 batch_tfms=batch_tfms) -&gt; 6 dls = block.dataloaders(path, bs=64) /usr/local/lib/python3.6/dist-packages/fastai2/data/block.py in dataloaders(self, source, path, verbose, **kwargs) 96 97 def dataloaders(self, source, path=&#39;.&#39;, verbose=False, **kwargs): &gt; 98 dsets = self.datasets(source) 99 kwargs = {**self.dls_kwargs, **kwargs, &#39;verbose&#39;: verbose} 100 return dsets.dataloaders(path=path, after_item=self.item_tfms, after_batch=self.batch_tfms, **kwargs) /usr/local/lib/python3.6/dist-packages/fastai2/data/block.py in datasets(self, source, verbose) 93 splits = (self.splitter or RandomSplitter())(items) 94 pv(f&#34;{len(splits)} datasets of sizes {&#39;,&#39;.join([str(len(s)) for s in splits])}&#34;, verbose) &gt; 95 return Datasets(items, tfms=self._combine_type_tfms(), splits=splits, dl_type=self.dl_type, n_inp=self.n_inp, verbose=verbose) 96 97 def dataloaders(self, source, path=&#39;.&#39;, verbose=False, **kwargs): /usr/local/lib/python3.6/dist-packages/fastai2/data/core.py in __init__(self, items, tfms, tls, n_inp, dl_type, **kwargs) 272 def __init__(self, items=None, tfms=None, tls=None, n_inp=None, dl_type=None, **kwargs): 273 super().__init__(dl_type=dl_type) --&gt; 274 self.tls = L(tls if tls else [TfmdLists(items, t, **kwargs) for t in L(ifnone(tfms,[None]))]) 275 self.n_inp = (1 if len(self.tls)==1 else len(self.tls)-1) if n_inp is None else n_inp 276 /usr/local/lib/python3.6/dist-packages/fastai2/data/core.py in &lt;listcomp&gt;(.0) 272 def __init__(self, items=None, tfms=None, tls=None, n_inp=None, dl_type=None, **kwargs): 273 super().__init__(dl_type=dl_type) --&gt; 274 self.tls = L(tls if tls else [TfmdLists(items, t, **kwargs) for t in L(ifnone(tfms,[None]))]) 275 self.n_inp = (1 if len(self.tls)==1 else len(self.tls)-1) if n_inp is None else n_inp 276 /usr/local/lib/python3.6/dist-packages/fastcore/foundation.py in __call__(cls, x, *args, **kwargs) 39 return x 40 &gt; 41 res = super().__call__(*((x,) + args), **kwargs) 42 res._newchk = 0 43 return res /usr/local/lib/python3.6/dist-packages/fastai2/data/core.py in __init__(self, items, tfms, use_list, do_setup, split_idx, train_setup, splits, types, verbose) 212 if do_setup: 213 pv(f&#34;Setting up {self.tfms}&#34;, verbose) --&gt; 214 self.setup(train_setup=train_setup) 215 216 def _new(self, items, **kwargs): return super()._new(items, tfms=self.tfms, do_setup=False, types=self.types, **kwargs) /usr/local/lib/python3.6/dist-packages/fastai2/data/core.py in setup(self, train_setup) 226 227 def setup(self, train_setup=True): --&gt; 228 self.tfms.setup(self, train_setup) 229 if len(self) != 0: 230 x = super().__getitem__(0) if self.splits is None else super().__getitem__(self.splits[0])[0] /usr/local/lib/python3.6/dist-packages/fastcore/transform.py in setup(self, items, train_setup) 177 tfms = self.fs[:] 178 self.fs.clear() --&gt; 179 for t in tfms: self.add(t,items, train_setup) 180 181 def add(self,t, items=None, train_setup=False): /usr/local/lib/python3.6/dist-packages/fastcore/transform.py in add(self, t, items, train_setup) 180 181 def add(self,t, items=None, train_setup=False): --&gt; 182 t.setup(items, train_setup) 183 self.fs.append(t) 184 /usr/local/lib/python3.6/dist-packages/fastcore/transform.py in setup(self, items, train_setup) 76 def setup(self, items=None, train_setup=False): 77 train_setup = train_setup if self.train_setup is None else self.train_setup &gt; 78 return self.setups(getattr(items, &#39;train&#39;, items) if train_setup else items) 79 80 def _call(self, fn, x, split_idx=None, **kwargs): /usr/local/lib/python3.6/dist-packages/fastcore/dispatch.py in __call__(self, *args, **kwargs) 96 if not f: return args[0] 97 if self.inst is not None: f = MethodType(f, self.inst) &gt; 98 return f(*args, **kwargs) 99 100 def __get__(self, inst, owner): /usr/local/lib/python3.6/dist-packages/fastai2/data/transforms.py in setups(self, dsets) 214 215 def setups(self, dsets): --&gt; 216 if self.vocab is None and dsets is not None: self.vocab = CategoryMap(dsets, add_na=self.add_na) 217 self.c = len(self.vocab) 218 /usr/local/lib/python3.6/dist-packages/fastai2/data/transforms.py in __init__(self, col, sort, add_na) 199 if not hasattr(col,&#39;unique&#39;): col = L(col, use_list=True) 200 # `o==o` is the generalized definition of non-NaN used by Pandas --&gt; 201 items = L(o for o in col.unique() if o==o) 202 if sort: items = items.sorted() 203 self.items = &#39;#na#&#39; + items if add_na else items /usr/local/lib/python3.6/dist-packages/fastcore/foundation.py in unique(self) 372 return self._new(i for i,o in enumerate(self) if f(o)) 373 --&gt; 374 def unique(self): return L(dict.fromkeys(self).keys()) 375 def enumerate(self): return L(enumerate(self)) 376 def val2idx(self): return {v:k for k,v in self.enumerate()} /usr/local/lib/python3.6/dist-packages/fastai2/data/core.py in &lt;genexpr&gt;(.0) 218 def _after_item(self, o): return self.tfms(o) 219 def __repr__(self): return f&#34;{self.__class__.__name__}: {self.items} ntfms - {self.tfms.fs}&#34; --&gt; 220 def __iter__(self): return (self[i] for i in range(len(self))) 221 def show(self, o, **kwargs): return self.tfms.show(o, **kwargs) 222 def decode(self, o, **kwargs): return self.tfms.decode(o, **kwargs) /usr/local/lib/python3.6/dist-packages/fastai2/data/core.py in __getitem__(self, idx) 253 res = super().__getitem__(idx) 254 if self._after_item is None: return res --&gt; 255 return self._after_item(res) if is_indexer(idx) else res.map(self._after_item) 256 257 # Cell /usr/local/lib/python3.6/dist-packages/fastai2/data/core.py in _after_item(self, o) 216 def _new(self, items, **kwargs): return super()._new(items, tfms=self.tfms, do_setup=False, types=self.types, **kwargs) 217 def subset(self, i): return self._new(self._get(self.splits[i]), split_idx=i) --&gt; 218 def _after_item(self, o): return self.tfms(o) 219 def __repr__(self): return f&#34;{self.__class__.__name__}: {self.items} ntfms - {self.tfms.fs}&#34; 220 def __iter__(self): return (self[i] for i in range(len(self))) /usr/local/lib/python3.6/dist-packages/fastcore/transform.py in __call__(self, o) 183 self.fs.append(t) 184 --&gt; 185 def __call__(self, o): return compose_tfms(o, tfms=self.fs, split_idx=self.split_idx) 186 def __repr__(self): return f&#34;Pipeline: {&#39; -&gt; &#39;.join([f.name for f in self.fs if f.name != &#39;noop&#39;])}&#34; 187 def __getitem__(self,i): return self.fs[i] /usr/local/lib/python3.6/dist-packages/fastcore/transform.py in compose_tfms(x, tfms, is_enc, reverse, **kwargs) 136 for f in tfms: 137 if not is_enc: f = f.decode --&gt; 138 x = f(x, **kwargs) 139 return x 140 /usr/local/lib/python3.6/dist-packages/fastcore/transform.py in __call__(self, x, **kwargs) 70 @property 71 def name(self): return getattr(self, &#39;_name&#39;, _get_name(self)) &gt; 72 def __call__(self, x, **kwargs): return self._call(&#39;encodes&#39;, x, **kwargs) 73 def decode (self, x, **kwargs): return self._call(&#39;decodes&#39;, x, **kwargs) 74 def __repr__(self): return f&#39;{self.name}: {self.encodes} {self.decodes}&#39; /usr/local/lib/python3.6/dist-packages/fastcore/transform.py in _call(self, fn, x, split_idx, **kwargs) 80 def _call(self, fn, x, split_idx=None, **kwargs): 81 if split_idx!=self.split_idx and self.split_idx is not None: return x &gt; 82 return self._do_call(getattr(self, fn), x, **kwargs) 83 84 def _do_call(self, f, x, **kwargs): /usr/local/lib/python3.6/dist-packages/fastcore/transform.py in _do_call(self, f, x, **kwargs) 84 def _do_call(self, f, x, **kwargs): 85 if not _is_tuple(x): &gt; 86 return x if f is None else retain_type(f(x, **kwargs), x, f.returns_none(x)) 87 res = tuple(self._do_call(f, x_, **kwargs) for x_ in x) 88 return retain_type(res, x) /usr/local/lib/python3.6/dist-packages/fastcore/dispatch.py in __call__(self, *args, **kwargs) 96 if not f: return args[0] 97 if self.inst is not None: f = MethodType(f, self.inst) &gt; 98 return f(*args, **kwargs) 99 100 def __get__(self, inst, owner): KeyError: Path(&#39;/root/.fastai/data/imagewoof2/train/n02115641/n02115641_609.JPEG&#39;) . Oh no, I got an error! What is it telling me? That I was passing in the full image path to the dictionary before we extracted the parent_label, so order does matter in how you place these functions! Now let&#39;s rearrange the same problem and do multi-label classification . Multiple Labels in one y . In the next blog, I will explain further the concept of multi-label classification and just how far we can push the DataBlock API to do so, but for right now we&#39;ll explore a very simple idea: . &quot;How do I tell my model, I don&#39;t know&quot; . We can apply the concepts behind multi-label classification here to do so, which are: . Any number of labels can show up at any point in time, and no labels can be present as well | . We want to focus on that last part, &quot;no labels can be present as well&quot;. Alright, so how do we do this? Through another transform! fastai has a MultiCategoryBlock designed for these multi-labelled problems, as we&#39;re expecting some form of a list as our y values. If you&#39;ve caught on to where I&#39;m going here, great thinking! We&#39;ll simply build a transform that takes our new label, and makes it a list! . Is it really that simple? Let&#39;s see: . def make_list(o): return [o] . block = DataBlock(blocks=(ImageBlock, MultiCategoryBlock), get_items=get_image_files, get_y=[parent_label, lbl_dict.__getitem__, make_list], item_tfms=item_tfms, batch_tfms=batch_tfms) . Let&#39;s see if this worked: . dls = block.dataloaders(path) . dls.show_batch(max_n=3) . I don&#39;t see that much of a difference here, how do we know it worked? Let&#39;s explore the Dataset inside of the DataLoader . dls.dataset[0] . (PILImage mode=RGB size=270x300, TensorMultiCategory([0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])) . We can see here that our y values are a MultiCategory tensor (don&#39;t worry about this for now) and that it is a one-hot encoding of what class shows up! Exactly like we were wanting! In a further lesson we&#39;ll go into how to take this into training a model, but that&#39;s all that we&#39;ll cover in this post! In the next one we will discuss more about MultiCategory based problems and how flexible the API is, especially with get_x, get_y, and get_items. Thanks for reading! .",
            "url": "https://muellerzr.github.io/fastblog/datablock/2020/03/22/TheIdeaofaTransform.html",
            "relUrl": "/datablock/2020/03/22/TheIdeaofaTransform.html",
            "date": " • Mar 22, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "fastai and the New DataBlock API",
            "content": ". This blog is also a Jupyter notebook available to run from the top down. There will be code snippets that you can then run in any environment. In this section I will be posting what version of fastai2 and fastcore I am currently running at the time of writing this: . fastai2: 0.0.13 . | fastcore: 0.1.15 . | . . What is the DataBlock API? . The DataBlock API is certainly nothing new to fastai. It was here in a lesser form in the previous version, and the start of an idea. This idea was: &quot;How do we let the users of the fastai library build DataLoaders in a way that is simple enough that someone with minimal coding knowledge could get the hang of it, but be advanced enough to allow for exploration.&quot; The old version was a struggle to do this from a high-level API standpoint, as you were very limited in what you could do: variables must be passed in a particular order, the error checking wasn&#39;t very explanatory (to those unaccustomed to debugging issues), and while the general idea seemed to flow, sometimes it didn&#39;t quite work well enough. For our first example, we&#39;ll look at the Pets dataset and compare it from fastai version 1 to fastai version 2 . The DataBlock itself is built on &quot;building blocks&quot;, think of them as legos. (For more information see fastai: A Layered API for Deep Learning) They can go in any order but together they&#39;ll always build something. Our lego bricks go by these general names: . blocks | get_items | get_x/get_y | getters | splitter | item_tfms | batch_tfms | . We&#39;ll be exploring each one more closely throughout this series, so we won&#39;t hit on all of them today . Importing from the library . The library itself is still split up into modules, similar to the first version where we have Vision, Text, and Tabular. To import from these libraries, we&#39;ll be calling their .all files. Our example problem for today will involve Computer Vision so we will call from the .vision library . from fastai2.vision.all import * . Pets . Pets is a dataset in which you try to identify one of 37 different species of cats and dogs. To get the dataset, we&#39;re going to use functions very familiar to those that used fastai version 1. We&#39;ll use untar_data to grab the dataset we want. In our case, the Pets dataset lives in URLs.PETS . URLs.PETS . &#39;https://s3.amazonaws.com/fast-ai-imageclas/oxford-iiit-pet.tgz&#39; . path = untar_data(URLs.PETS) . Looking at the dataset . When starting to look at adapting the API for a particular problem, we need to know just how the data is stored. We have an image problem here so we can use the get_image_files function to go grab all the file locations of our images and we can look at the data! . fnames = get_image_files(path/&#39;images&#39;) . To investigate how the files are named and where they are located, let&#39;s look at the first one: . fnames[0] . Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/pug_119.jpg&#39;) . Now as get_image_files grabs the filename of our x for us, we don&#39;t need to include our get_x here (which defaults to None) as we just want to use this filepath! Now onto our file paths and how they relate to our labels. If we look at our returned path, this particular image has the class of pug. . Where do I see that? . Here: Path(&#39;/root/.fastai/data/oxford-iiit-pet/images/pug_119.jpg&#39;) . All the images follow this same format, and we can use a Regular Expression: to get it out. In our case, it would look something like so: . pat = r&#39;([^/]+)_ d+.*$&#39; . How do we know it worked? Let&#39;s apply it to the first file path real quick with re.search where we pass in the pattern followed by an item to try and find a match in the first group (set of matches) with a Regular Expression . re.search(pat, str(fnames[0])).group(1) . &#39;pug&#39; . We have our label! So what parts do we have so far? We know how to grab our items (get_items and get_x), our labels (get_y), what&#39;s left? Well, we&#39;ll want some way to split our data and our data augmentation. Let&#39;s focus on the prior. . Splitting and Augmentation . Any time we train a model, the data must be split between a training and validation dataset. The general idea is that the training dataset is what the model adjusts and fits its weights to, while the validation set is for us to understand how the model is performing. fastai2 has a family of split functions to look at that will slowly get covered throughout these blogs. For today we&#39;ll randomly split our data so 80% goes into our training set and 20% goes into the validation. We can utilize RandomSplitter to do so by passing in a percentage to split by, and optionally a seed as well to get the same validation split on multiple runs . splitter = RandomSplitter(valid_pct=0.2, seed=42) . How is this splitter applied? The splitter itself is a function that we can then apply over some set of data or numbers (an array). It works off of indexes. What does that look like? Let&#39;s see: . splitter(fnames) . ((#5912) [5643,5317,5806,3460,613,5456,2968,3741,10,4908...], (#1478) [4512,4290,5770,706,2200,4320,6450,501,1290,6435...]) . That doesn&#39;t look like filenames! Correct, instead its the location in our list of filenames and what group it belongs to. What this special looking list (or L) also tells us is how many items are in each list. In this example, the first (which is our training data) has 5,912 samples and the second (which is our validation) contains 1,478 samples. . Now let&#39;s move onto the augmentation. As noted earlier, there are two kinds: item_tfms and batch_tfms. Each do what it sounds like: an item transform is applied on an individual item basis, and a batch transform is applied over each batch of data. The role of the item transform is to prepare everything for a batch level (and to apply any specific item transformations you need), and the batch transform is to further apply any augmentations on the batch level efficently (normalization of your data also happens on a batch level). One of the biggest differences between the two though is where each is done. Item transforms are done on the CPU while batch transforms are performed on the GPU. . Now that we know this, let&#39;s build a basic transformation pipeline that looks something like so: . Resize our images to a fixed size (224x224 pixels) | After they are batched together, choose a quick basic augmentation function | Normalize all of our image data | Let&#39;s build it! . item_tfms = [Resize(224, method=&#39;crop&#39;)] batch_tfms=[*aug_transforms(size=256), Normalize.from_stats(*imagenet_stats)] . Woah, woah, woah, what in the world is this aug_transforms thing you just showed me I hear you ask? It runs a series of augmentations similar to the get_transforms() from version 1. The entire list is quite exhaustive and we&#39;ll discuss it in a later blog, but for now know we can pass in an image size to resize our images to (we&#39;ll make our images a bit larger, doing 256x256). . Alright, we know how we want to get our data, how to label it, split it, and augment it, what&#39;s left? That block bit I mentioned before. . The Block . Block&#39;s are used to help nest transforms inside of pre-defined problem domains. . Lazy-man&#39;s explaination? . If it&#39;s an image problem I can tell the library to use Pillow without explicitly saying it, or if we have a Bounding Box problem I can tell the DataBlock to expect two coordinates for boxes and to apply the transforms for points, again without explicitly saying these transforms. . What will we use today? Well let&#39;s think about our problem: we are using an image for our x, and our labels (or y&#39;s) are some category. Is there blocks for this? Yes! And they&#39;re labeled ImageBlock and CategoryBlock! Remember how I said it just &quot;made more sense?&quot; This is a direct example. Let&#39;s define them: . blocks = (ImageBlock, CategoryBlock) . Now let&#39;s build this DataBlock thing already! . Alright we have all the pieces now, let&#39;s see how they fit together. We&#39;ll all wrap them up in a nice little package of a DataBlock. Think of the DataBlock as a list of instructions to do when we&#39;re building batches and our DataLoaders. It doesn&#39;t need any items explicitly to be done, and instead is a blueprint of how to operate. We define it like so: . block = DataBlock(blocks=blocks, get_items=get_image_files, get_y=RegexLabeller(pat), splitter=splitter, item_tfms=item_tfms, batch_tfms=batch_tfms) . Once we have our DataBlock, we can build some DataLoaders off of it. To do so we simply pass in a source for our data that our DataBlock would be expecting, specifically our get_x and get_y, so we&#39;ll follow the same idea we did above to get our filenames and pass in a path to the folder we want to use along with a batch size: . dls = block.dataloaders(path, bs=64) . While it&#39;s a bit long, you can understand why we had to define everything the way that we did. If you&#39;re used to how fastai v1 looked with the ImageDataBunch.from_x, well this is stil here too: . dls = ImageDataLoaders.from_name_re(path, fnames, pat, item_tfms=item_tfms, batch_tfms=batch_tfms, bs=64) . I&#39;m personally a much larger fan of the first example, and if you&#39;re planning on using the library quite a bit you should get used to it more as well! This blog series will be focusing on that nomenclature specifically. To make sure everything looks okay and we like our augmentation we can show a batch of images from our DataLoader. It&#39;s as simple as: . dls.show_batch() . Fitting a Model . Now from here everything looks and behaves exactly how it did in fastai version 1: . Define a Learner | Find a learning rate | Fit | We&#39;ll quickly see that fastai2 has a quick function for transfer learning problems like we are doing, but first let&#39;s build the Learner. This will use cnn_learner, as we are doing transfer learning, and we&#39;ll tell the function to use a resnet34 architecture with accuracy metrics . learn = cnn_learner(dls, resnet34, metrics=accuracy) . Now normally we would do learn.lr_find() and find a learning rate, but with the new library, we now have a fine_tune() function we can use instead specifically designed for transfer learning scenarios. It runs a specified number of epochs (the number of times we fully go through the dataset) on a frozen model (where all but the last layer&#39;s weights are not trainable) and then the last few will be on an unfrozen model (where all weights are trainable again). When just passing in one set of epochs, like below, it will run frozen for one and unfrozen for the rest. Let&#39;s try it! . learn.fine_tune(3) . epoch train_loss valid_loss accuracy time . 0 | 1.488222 | 0.331919 | 0.893099 | 00:42 | . epoch train_loss valid_loss accuracy time . 0 | 0.471458 | 0.363768 | 0.890392 | 00:43 | . 1 | 0.368975 | 0.250430 | 0.926252 | 00:43 | . 2 | 0.205113 | 0.215602 | 0.935047 | 00:44 | . As we can see we did pretty goood just with this default! Generally when the accuracy is this high, we want to turn instead to error_rate for our metric, as this would show ~6.5% and is a better comparison when it gets very fine tuned. . But that&#39;s it for this first introduction! We looked at how the Pets dataset can be loaded into the new high-level DataBlock API, and what it&#39;s built with. In the next blog we will be exploring more variations with the DataBlock as we get more and more creative. Thanks for reading! .",
            "url": "https://muellerzr.github.io/fastblog/datablock/2020/03/21/DataBlockAPI.html",
            "relUrl": "/datablock/2020/03/21/DataBlockAPI.html",
            "date": " • Mar 21, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I am currently an undergraduate student at the University of West Florida, with a graduation date of Fall 2022. Afterwards, I plan on going to Graduate School to get my Master’s Degree in Data Science . At the University I facilitate and teach the Fast.AI classes to Undergraduates and Graduates, with Jeremy’s notes being my forefront go-to. Currently, the Practical Deep Learning course is happening, with plans to slowly integrate more to help teach students the benefits of knowing Deep Learning in the modern world. . Contact me . muellerzr@gmail.com .",
          "url": "https://muellerzr.github.io/fastblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}